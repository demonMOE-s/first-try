#include <stdio.h>
#include <stdlib.h>

// ----------------------------------------------
//	author:demonMOE-s
//	purpose:built Z80 flags look up table 
//	use tcc: command-> tcc Z80FlagsLookUpTable.c
//	ref:Marat Fayzullin's Z80 CPU source code 
//	page:http://fms.komkon.org/
// ----------------------------------------------

typedef signed char int8_t;
typedef signed short int16_t;
typedef signed int int32_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;

int main (void) {
	
	uint32_t index;
	uint32_t tempi;
	uint8_t ZSTable[256] = {0};
	uint8_t PZSTable[256]= {0};
	uint8_t DAATable[256]= {0};

#ifdef _MSC_VER
	
	__asm {
		push ebx 
		xor ecx, ecx 
	loopw:
		setz al
		sets bl
		lea	eax, [eax+ebx*2]
		setp bl
		jc outw
		ror al, 2 
		rol bl, 2
		or bl, al
		mov BYTE PTR[ZSTable+ecx], al
		mov BYTE PTR[PZSTable+ecx], bl 
		sub bl, bl /* clr CF-AF */ 
		mov al, cl 
		daa /* BCD adjust */ 
		mov BYTE PTR[DAATable+ecx], al
		add cl, 1 
		jmp loopw 
	outw:
		pop ebx 
	}
#else 
	__asm__ __volatile__(

		"pushl %%ebx\n\t"
		"pushl %%esi\n\t"
		"pushl %%edi\n\t"
        "xorl %%ecx, %%ecx\n\t"
		"loopw:\n\t"
		"setz %%al\n\t"
        "sets %%bl\n\t"
		"leal (%%eax,%%ebx,0x2),%%eax\n\t"
		"setp %%bl\n\t"
		"jc outw\n\t"
		"rorb $0x2,%%al\n\t"
		"rolb $0x2,%%bl\n\t"
		"orb  %%al,%%bl\n\t"
		"movb %%al,(%%esi,%%ecx,0x1)\n\t"
		"movb %%bl,(%%edi,%%ecx,0x1)\n\t"
		"subb %%bl,%%bl\n\t"
		"movb %%cl,%%al\n\t"
		"leal %2, %%ebx\n\t"
		"daa\n\t"
		"movb %%al,(%%ebx,%%ecx,0x1)\n\t"
		"addb $0x1,%%cl\n\t"
		"jmp loopw\n\t"
		"outw:\n\t"
		"popl %%edi\n\t"
		"popl %%esi\n\t"
		"popl %%ebx\n\t"::"S"(&ZSTable),"D"(&PZSTable),"m"(&DAATable) 
		
		);
#endif 	
	/* --- out ZSTable --- */
	printf("static const u8 ZSTable[256] = {\n\n\t");
	for (index = 0; index != 256; index ++) 
	{
		printf("0x%02X",
					ZSTable[index]
			);
				
		index == 255 
			? printf("\n};\n")
			: index % 8 == 7 
			? printf(","), printf("\n\t")
			: printf(",");
	}
	/* --- out PZSTable --- */
	printf("static const u8 PZSTable[256] = {\n\n\t");
	for (index = 0; index != 256; index ++) 
	{
		printf("0x%02X",
			PZSTable[index]
		);

		index == 255 
			? printf("\n};\n")
			: index % 8 == 7 
			? printf(","), printf("\n\t")
			: printf(",");
	}
	/* --- out DAATable --- */
	printf("static const u8 DAATable[256] = {\n\n\t");
	for (index = 0; index != 256; index ++) 
	{
		printf("0x%02X",
			DAATable[index]
		);

		index == 255 
			? printf("\n};\n")
			: index % 8 == 7 
			? printf(","), printf("\n\t")
			: printf(",");
	}	
	system ("pause");
	return 0;
}
#if 0

/* -------------- CUI output --------------- */ 

static const u8 ZSTable[256] = {

        0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80
};
static const u8 PZSTable[256] = {

        0x44,0x00,0x00,0x04,0x00,0x04,0x04,0x00,
        0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,
        0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,
        0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,
        0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,
        0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,
        0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,
        0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,
        0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,
        0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,
        0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,
        0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,
        0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,
        0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,
        0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,
        0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,
        0x80,0x84,0x84,0x80,0x84,0x80,0x80,0x84,
        0x84,0x80,0x80,0x84,0x80,0x84,0x84,0x80,
        0x84,0x80,0x80,0x84,0x80,0x84,0x84,0x80,
        0x80,0x84,0x84,0x80,0x84,0x80,0x80,0x84,
        0x84,0x80,0x80,0x84,0x80,0x84,0x84,0x80,
        0x80,0x84,0x84,0x80,0x84,0x80,0x80,0x84,
        0x80,0x84,0x84,0x80,0x84,0x80,0x80,0x84,
        0x84,0x80,0x80,0x84,0x80,0x84,0x84,0x80,
        0x84,0x80,0x80,0x84,0x80,0x84,0x84,0x80,
        0x80,0x84,0x84,0x80,0x84,0x80,0x80,0x84,
        0x80,0x84,0x84,0x80,0x84,0x80,0x80,0x84,
        0x84,0x80,0x80,0x84,0x80,0x84,0x84,0x80,
        0x80,0x84,0x84,0x80,0x84,0x80,0x80,0x84,
        0x84,0x80,0x80,0x84,0x80,0x84,0x84,0x80,
        0x84,0x80,0x80,0x84,0x80,0x84,0x84,0x80,
        0x80,0x84,0x84,0x80,0x84,0x80,0x80,0x84
};
static const u8 DAATable[256] = {

        0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
        0x08,0x09,0x10,0x11,0x12,0x13,0x14,0x15,
        0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,
        0x18,0x19,0x20,0x21,0x22,0x23,0x24,0x25,
        0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,
        0x28,0x29,0x30,0x31,0x32,0x33,0x34,0x35,
        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,
        0x38,0x39,0x40,0x41,0x42,0x43,0x44,0x45,
        0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,
        0x48,0x49,0x50,0x51,0x52,0x53,0x54,0x55,
        0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,
        0x58,0x59,0x60,0x61,0x62,0x63,0x64,0x65,
        0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,
        0x68,0x69,0x70,0x71,0x72,0x73,0x74,0x75,
        0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,
        0x78,0x79,0x80,0x81,0x82,0x83,0x84,0x85,
        0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,
        0x88,0x89,0x90,0x91,0x92,0x93,0x94,0x95,
        0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,
        0x98,0x99,0x00,0x01,0x02,0x03,0x04,0x05,
        0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
        0x08,0x09,0x10,0x11,0x12,0x13,0x14,0x15,
        0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,
        0x18,0x19,0x20,0x21,0x22,0x23,0x24,0x25,
        0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,
        0x28,0x29,0x30,0x31,0x32,0x33,0x34,0x35,
        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,
        0x38,0x39,0x40,0x41,0x42,0x43,0x44,0x45,
        0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,
        0x48,0x49,0x50,0x51,0x52,0x53,0x54,0x55,
        0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,
        0x58,0x59,0x60,0x61,0x62,0x63,0x64,0x65
};

#endif 
